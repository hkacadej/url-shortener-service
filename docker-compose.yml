version: '3.8'

services:
  postgres-db:
    image: postgres:15
    container_name: postgres-db
    networks:
      - app-network
    environment:
      POSTGRES_DB: urlshortener
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped

  kraft-kafka:
    image: bitnami/kafka:3.6
    container_name: kraft-kafka
    networks:
      - app-network
    ports:
      - "9092:9092"
    environment:
      KAFKA_KRAFT_BROKER_ID: 1
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kraft-kafka:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kraft-kafka:9092
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_LOG_DIRS: /bitnami/kafka/data
    volumes:
      - kraft-logs:/bitnami/kafka/data
    restart: unless-stopped

  uss:
    image: uss  # or `image: uss` if already built
    container_name: uss
    env_file: .env
    networks:
      - app-network
    ports:
      - "8080:8080"
    depends_on:
      - postgres-db
      - kraft-kafka
    restart: unless-stopped

  angular-app:
    build:
      context: ./subfolder-name
      dockerfile: Dockerfile
    image: url-shortener-client:latest
    container_name: angular-app-container
    ports:
      - "8080:80"
    restart: unless-stopped

    # Optional: Add health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
networks:
  app-network:
    driver: bridge

volumes:
  pgdata:
  kraft-logs:
